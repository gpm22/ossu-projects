// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //setting writeM
    And(a=instruction[3], b=instruction[15], out=writeM);
    
    //first mux
    Mux16(a=instruction, b=aluoutput, sel=instruction[15], out=outMux1);

    //A register
    Not(in=instruction[15], out=isA);
    Or(a=instruction[5], b=isA, out=loadA);
    ARegister(in=outMux1, load=loadA, out=outA);

    //D register
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=aluoutput, load=loadD, out=outD); 

    // second mux
    Mux16(a=outA, b=inM, sel=instruction[12], out=outMux2);

    //setting addressM
    And16(a=outA, b=outA, out[0..14]=addressM);

    //ALU

    ALU(y=outMux2, x=outD, out=aluoutput, zr=zr, ng=ng, no=instruction[6], f=instruction[7], ny=instruction[8], zy=instruction[9], nx=instruction[10], zx=instruction[11]);

    //setting outM
    And16(a=aluoutput, b=aluoutput, out=outM);

    // jump 
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);

    And(a=notzr, b=notng, out=andjump1);
    And(a=zr, b=notng, out=andjump2);
    And(a=notzr, b=ng, out=andjump3);

    And(a=andjump1, b=instruction[0], out=andjump4);
    And(a=andjump2, b=instruction[1], out=andjump5);
    And(a=andjump3, b=instruction[2], out=andjump6);

    Or(a=andjump4, b=andjump5, out=orjump1);
    Or(a=andjump6, b=orjump1, out=orjump2);

    And(a=orjump2, b=instruction[15], out=jump);

    PC(reset=reset, in=outA, load=jump, inc=true, out[0..14]=pc);
}