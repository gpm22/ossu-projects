// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static int HEAP_BASE, HEAP_TAIL;
    static LinkedList freeMemory;
    static Array memory;

    /** Initializes the class. */
    function void init() {
        let memory = 0; //setting memory to the first RAM address
        let HEAP_BASE = 2048;
        let freeMemory = LinkedList.new(LinkedListElement.new(HEAP_BASE, (HEAP_TAIL - HEAP_BASE), null));
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var LinkedListElement block;
        let block = freeMemory.getAppropriateBlock(size);

        if (block.size = 0){
            do freeMemory.defragment();
            let block = freeMemory.getAppropriateBlock(size);
        }

        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        do freeMemory.addElement(o);
        return;
    }    
}
