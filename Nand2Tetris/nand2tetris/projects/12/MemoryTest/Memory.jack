// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */
class Memory {
    static Array memory,freeMemoryHead;
    static int HEAP_BASE, HEAP_TAIL;
    static int LENGTH, NEXT;

    /** Initializes memory parameters. */
    function void init() {
        let memory = 0; //setting memory to the first RAM address

        do Memory.initConstants();
        do Memory.initFreeMemoryHead();
        return;
    }

    function void initConstants(){
        let HEAP_BASE = 2048;
        let HEAP_TAIL = 16383;
        let LENGTH = 0;
        let NEXT = 1;
        return;
    }

    function void initFreeMemoryHead(){
        let freeMemoryHead = HEAP_BASE;
        let freeMemoryHead[LENGTH] = HEAP_TAIL-HEAP_BASE;
        let freeMemoryHead[NEXT] = null;
        return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** finds and allocates from the heap a memory block of the
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
        return Memory.allocHelper(size, false);
    }

    function int allocHelper(int size, boolean defragmented){
        var Array currentBlock, parentBlock, newBlock;
        var int realSize;

        let realSize = size + 2;
        let currentBlock = freeMemoryHead;
        let parentBlock = null;

        while (currentBlock[LENGTH] < realSize) {
            let parentBlock = currentBlock;
            let currentBlock = currentBlock[NEXT];
            if (currentBlock = null) {
                if(defragmented){
            	    // no free space
	           	    do Sys.error(6);
                }
                    do Output.println();
                    do Output.printString("before defrag");
                    do Output.println();
                    do Output.printInt(Memory.countNumberOfBlocks());

                    do Memory.defragment();

                    do Output.println();
                    do Output.printString("after defrag");
                    do Output.println();
                    do Output.printInt(Memory.countNumberOfBlocks());
                return Memory.allocHelper(size, true);
            }
        }

        let newBlock = Memory.createNewBlock(currentBlock, realSize);

        let currentBlock[LENGTH] = realSize;
        let currentBlock[NEXT] = null;

        do Memory.updateParentBlockChild(parentBlock, newBlock);
        return currentBlock + 2;
    }

    function int countNumberOfBlocks(){
        var Array currentBlock;
        var int number;

        let currentBlock = freeMemoryHead;
        let number = 0;
        while (~(currentBlock = null)) {
            let number = number + 1;
            let currentBlock = currentBlock[NEXT];
        }       
        return number;
    }

    function void defragment(){
        do Memory.defragmentHelper(true);
        return;
    }

    function void defragmentHelper(boolean firstTime){
        var Array currentBlock, parentBlock, comparingBlock, comparingParent;
        var boolean blockNotUpdated;

        let currentBlock = freeMemoryHead;
        let parentBlock = null;


        while (~(currentBlock = null)) {
            let comparingBlock = currentBlock[NEXT];
            let comparingParent = currentBlock;
            let blockNotUpdated = true;
            
            while(~(comparingBlock = null)){
                if(Memory.doesFirstBlockContainsSecond(comparingBlock, currentBlock)){
                    do Memory.updateParentBlockChild(parentBlock, currentBlock[NEXT]);
                    let comparingBlock[LENGTH] = currentBlock[LENGTH] + comparingBlock[LENGTH];
                    let currentBlock = comparingBlock;
                    let comparingBlock = null;
                    let blockNotUpdated = false;
                } else {
                   if(Memory.doesFirstBlockContainsSecond(currentBlock, comparingBlock)){
                        do Memory.updateParentBlockChild(comparingParent, comparingBlock[NEXT]);
                        let currentBlock[LENGTH] = comparingBlock[LENGTH] + currentBlock[LENGTH];
                        let comparingBlock = null;
                        let blockNotUpdated = false;
                   }  else {
                        let comparingParent = comparingBlock;
                        let comparingBlock = comparingBlock[NEXT];
                   }
                }
            }

            if(blockNotUpdated){
                let parentBlock = currentBlock;
                let currentBlock = currentBlock[NEXT];
            }
        }

        if(firstTime){
            do Memory.defragmentHelper(false);
        }
        return;
    }
    
    function boolean doesFirstBlockContainsSecond(Array first, Array second){
        return ((first[LENGTH] + first) = second);
    }

    function void updateParentBlockChild(Array parentBlock, Array newBlock){
        if (parentBlock = null) {
            let freeMemoryHead = newBlock;
        } else {
            let parentBlock[NEXT] = newBlock;
        }
        return;
    }

    function Array createNewBlock(Array block, int size){
        var Array newBlock;
        let newBlock = block + size;
        let newBlock[LENGTH] = block[LENGTH] - size;
        let newBlock[NEXT] = block[NEXT];
        return newBlock;
    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(Array object) {
        var Array block;
        let block = object - 2;
        let block[NEXT] = freeMemoryHead;
        let freeMemoryHead = block;
        return;
    }
}