class MemoryList{

    field MemoryListElement head, tail;

    constructor MemoryList new(MemoryListElement _head){
        let head = _head;
        let tail = _head.getNext();
         
        return this;
    }

    method MemoryListElement getAppropriateBlock(int size){
        var MemoryListElement currentBlock, parent;
        let currentBlock = head;
        let parent = null;
        
        while((~(currentBlock.getNext() = null)) | (parent = null)){
            if(currentBlock.size < size){
                let parent = currentBlock;
                let currentBlock = currentBlock.getNext();
            } else {
                if (currentBlock.size = size){ 
                    if (~(parent = null)){
                        do parent.setNext(currentBlock.getNext());
                    } else {
                        let head = currentBlock.getNext();
                    }

                    if (currentBlock.getNext() = null) {
                        let tail = parent;
                    }
                    return currentBlock;
                }

                return newSmallerBlock(currentBlock, size, parent);
            }
        }
        return null;
    }

    method MemoryListElement newSmallerBlock(MemoryListElement currentBlock, int size, MemoryListElement parent){
        var int newSize, newBaseAdrees;
        var MemoryListElement newNext, newBlock;

        let newSize = currentBlock.getSize() - size;
        let newBaseAddress = currentBlock.getBaseAddress() + size;
        let newNext = currentBlock.getNext(); 

        let newBlock = MemoryListElement.new(newBaseAddress, newSize, newNext);

        if (~(parent = null)){
            do parent.setNext(newBlock);
        } else {
            let head = newBlock;
        }

        if (currentBlock.getNext() = null) {
            let tail = newBlock;
        }
        
        do currentBlock.setSize(size);

        return currentBlock;
    }

    method void addElement(MemoryListElement newElement){
        do tail.setNext(newElement);
        let tail = newElement;
        return;
    }

    method void defragment(){
       return; 
    }

}